# Advent of Code 2023

```elixir
Mix.install([
  {:memoize, "~> 1.4"},
  {:tesla, "~> 1.8"}
])

defmodule Api do
  use Tesla
  use Memoize

  @session System.get_env("AOC_SESSION")

  plug(Tesla.Middleware.BaseUrl, "https://adventofcode.com/2023/day/")
  plug(Tesla.Middleware.Headers, [{"cookie", "session=#{@session}"}])

  defmemo get_input(day) do
    {:ok, response} = get("#{day}/input")
    response.body
  end
end

:ok
```

## Task 1

```elixir
test_input = """
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
"""

solve1 = fn input ->
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    numbers = Regex.scan(~r/[1-9]/, line)
    first = List.first(numbers)
    last = List.last(numbers)
    String.to_integer("#{first}#{last}")
  end)
  |> Enum.sum()
end

142 = solve1.(test_input)
solve1.(Api.get_input(1)) |> IO.inspect(label: "1.1")

test_input_2 = """
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
"""

strings_to_numbers = %{
  "one" => "1",
  "two" => "2",
  "three" => "3",
  "four" => "4",
  "five" => "5",
  "six" => "6",
  "seven" => "7",
  "eight" => "8",
  "nine" => "9"
}

string_to_number = fn string -> strings_to_numbers[string] || string end

solve2 = fn input ->
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    regex = ~r/(?=([1-9]|#{strings_to_numbers |> Map.keys() |> Enum.join("|")}))/
    numbers = regex |> Regex.scan(line, capture: :all_but_first) |> List.flatten()
    first = numbers |> List.first() |> string_to_number.()
    last = numbers |> List.last() |> string_to_number.()
    String.to_integer("#{first}#{last}")
  end)
  |> Enum.sum()
end

281 = solve2.(test_input_2)
443 = solve2.(test_input_2 <> "\nsevenine" <> "\neighthree")
solve2.(Api.get_input(1)) |> IO.inspect(label: "1.2")

:ok
```
